import sqlite3
import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
GIFT_ID = os.getenv("GIFT_ID")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–±–æ—Ä–æ–≤ —à–∞—Ä–æ–≤
COSTS = {
    3: 1,
    2: 4,
    1: 1,
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                stars INTEGER DEFAULT 20
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS referrals (
                user_id INTEGER PRIMARY KEY,
                referrer_id INTEGER
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                amount INTEGER
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS gifts_sent (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                gift_id TEXT,
                sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()

# –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_stars(user_id):
    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT stars FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            return row[0]
        else:
            cursor.execute("INSERT INTO users (user_id, stars) VALUES (?, ?)", (user_id, 0))
            conn.commit()
            return 0

# –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_user_stars(user_id, stars):
    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET stars = ? WHERE user_id = ?", (stars, user_id))
        conn.commit()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ—Å–ª–∏ –Ω–µ—Ç
def set_referrer_if_not_exists(user_id, referrer_id):
    if user_id == referrer_id:
        return
    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT referrer_id FROM referrals WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row is None:
            cursor.execute("INSERT INTO referrals (user_id, referrer_id) VALUES (?, ?)", (user_id, referrer_id))
            cursor.execute("UPDATE users SET stars = stars + 3 WHERE user_id=?", (referrer_id,))
            conn.commit()

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
def add_payment(amount):
    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO payments (amount) VALUES (?)", (amount,))
        conn.commit()

# –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥–∞—Ä–∫–∞
def record_gift_sent(user_id, gift_id):
    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO gifts_sent (user_id, gift_id) VALUES (?, ?)", (user_id, gift_id))
        conn.commit()

# –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
def get_stats():
    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        cursor.execute("SELECT IFNULL(SUM(amount),0) FROM payments")
        income = cursor.fetchone()[0] or 0
        cursor.execute("SELECT COUNT(*) FROM gifts_sent")
        gifts_count = cursor.fetchone()[0]
        expense = gifts_count * 15
        return users_count, income, expense

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–±–æ—Ä–æ–≤ –±—Ä–æ—Å–∫–æ–≤
def throw_keyboard(user_id):
    builder = InlineKeyboardBuilder()
    for count in sorted(COSTS.keys(), reverse=True):
        suffix = "—à–∞—Ä–∞"
        builder.button(
            text=f"üé≥ {count} {suffix} ‚Ä¢ {COSTS[count]}‚≠êÔ∏è",
            callback_data=f"throw_{count}"
        )
    builder.button(text="+ 3 ‚≠êÔ∏è –∑–∞ –¥—Ä—É–≥–∞", callback_data=f"referral_{user_id}")
    builder.button(text="üèÄ –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤ üéÅ", url="https://t.me/bankstars_support_bot")
    builder.adjust(2)
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
def admin_panel_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
         InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_broadcast")]
    ])
    return kb

# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å—é –µ—Å–ª–∏ –∞–¥–º–∏–Ω
async def send_menu_with_admin(user_id: int, chat_id: int):
    stars = get_user_stars(user_id)
    await bot.send_message(
        chat_id,
        
        text = (
        
        "üé≥ –±–æ—É–ª–∏–Ω–≥ –∑–∞ –ø–æ–¥–∞—Ä–∫–∏ –æ—Ñ–æ—Ä–º–∏ —Å—Ç—Ä–∞–π–∫ –∫–∞–∂–¥—ã–º –±—Ä–æ—Å–∫–æ–º –∏ –ø–æ–ª—É—á–∏ –∫—Ä—É—Ç–æ–π –ø–æ–¥–∞—Ä–æ–∫ üß∏üíùüéÅüåπ\n\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è",
        
        reply_markup=throw_keyboard(user_id)
    )
    if user_id == ADMIN_ID and ADMIN_ID != 0:
        await bot.send_message(
            chat_id,
            "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_panel_keyboard()
        )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_media = State()
    waiting_content = State()
    waiting_button_text = State()
    waiting_button_url = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
@dp.message(Command("start"))
async def start_handler_with_referral(message: types.Message, command: CommandObject):
    args = command.args
    user_id = message.from_user.id
    if args and args.isdigit():
        ref_id = int(args)
        set_referrer_if_not_exists(user_id, ref_id)

    await send_menu_with_admin(user_id, message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data.startswith("referral_"))
async def process_referral(callback_query: types.CallbackQuery):
    inviter_id = int(callback_query.data.split("_")[1])
    bot_info = await bot.get_me()
    url = f"https://t.me/{bot_info.username}?start={inviter_id}"

    text = (
        "üé≥ –ë—Ä–æ—Å–∞–π –≤—ã–∑–æ–≤ —É–¥–∞—á–µ –≤ –∏–≥—Ä–µ –±–æ—É–ª–∏–Ω–≥!\n"
        "üéÅ –í—ã–∏–≥—Ä—ã–≤–∞–π –∫–ª–∞—Å—Å–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π —Å—Ç—Ä–∞–π–∫! üéÅ\n\n"
        "üë´ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π:\n"
        "‚Äî –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ +3 ‚≠êÔ∏è\n\n"
        "üî• –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ–π —à–∞–Ω—Å!\n"
        f"{url}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=text)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    await callback_query.message.answer(text, reply_markup=kb)
    await callback_query.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await send_menu_with_admin(callback_query.from_user.id, callback_query.message.chat.id)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–∞–±–æ—Ä —à–∞—Ä–æ–≤ –¥–ª—è –±—Ä–æ—Å–∫–∞
@dp.callback_query(F.data.startswith("throw_"))
async def process_throw(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    count = int(callback_query.data.split("_")[1])
    price_stars = COSTS.get(count)
    if price_stars is None:
        await callback_query.answer("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —à–∞—Ä–æ–≤")
        return

    await bot.send_invoice(
        chat_id=user_id,
        title=f"{count} —à–∞—Ä–æ–≤ –¥–ª—è –±—Ä–æ—Å–∫–∞",
        description=f"üèÜ –ù–∞–±–æ—Ä –¥–ª—è —Å—Ç—Ä–∞–π–∫–∞ - {count} –±—Ä–æ—Å–∫–æ–≤",
        payload=f"bowling_{count}",
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=[LabeledPrice(label=f"{count} –±—Ä–æ—Å–∫–æ–≤", amount=price_stars)],
        start_parameter=f"bowling_{count}"
    )
    await callback_query.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.pre_checkout_query()
async def checkout(pre_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_q.id, ok=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –±—Ä–æ—Å–∫–æ–≤
@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(msg: types.Message):
    user_id = msg.from_user.id
    payload = msg.successful_payment.invoice_payload

    if payload.startswith("bowling_"):
        count = int(payload.split("_")[1])
        results = []
        hits = 0

        for i in range(count):
            dice = await bot.send_dice(user_id, emoji="üé≥")
            await asyncio.sleep(2)
            if dice.dice.value >= 6:
                results.append((i + 1, "—Å—Ç—Ä–∞–π–∫ ‚úÖ"))
                hits += 1
            else:
                results.append((i + 1, "–Ω–µ—É–¥–∞—á–∞ ‚ùå"))

        throws_text = "\n".join([f"–ë—Ä–æ—Å–æ–∫ #{i} ‚Äì {res}" for i, res in results])
        quote_msg = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã üé≥ {count} –±—Ä–æ—Å–∫–æ–≤\n\n{throws_text}"
        await bot.send_message(user_id, f"```{quote_msg}```", parse_mode="Markdown")

        if hits == count:
            await asyncio.sleep(0.5)
            await bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –±—Ä–æ—Å–∫–∏ –±—ã–ª–∏ —Å—Ç—Ä–∞–π–∫–∞–º–∏!")
            await asyncio.sleep(0.5)
            await bot.send_message(user_id, "üéÅ –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è...")

            if GIFT_ID:
                try:
                    await bot.send_gift(
                        chat_id=user_id,
                        gift_id=GIFT_ID,
                        text="üß∏",
                        pay_for_upgrade=False
                    )
                    record_gift_sent(user_id, GIFT_ID)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await asyncio.sleep(0.5)
            await bot.send_message(user_id, "üß∏")
        else:
            await bot.send_message(user_id, "–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")

        stars = get_user_stars(user_id)
        await bot.send_message(user_id, f"üí∞ –ë–∞–ª–∞–Ω—Å: {stars} ‚≠êÔ∏è", reply_markup=throw_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("admin_"))
async def admin_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    data = callback.data
    if data == "admin_stats":
        users_count, income, expense = get_stats()
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
            f"–î–æ—Ö–æ–¥: {income} XTR\n"
            f"–†–∞—Å—Ö–æ–¥: {expense} XTR"
        )
        await callback.message.answer(text)
        await callback.answer()
    elif data == "admin_broadcast":
        await callback.message.answer("üìù –ü—Ä–∏—à–ª–∏ –º–Ω–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–∏—Ñ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        await state.set_state(BroadcastStates.waiting_media)
        await callback.answer()

# –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(BroadcastStates.waiting_media, F.content_type.in_({ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT, ContentType.ANIMATION}))
async def broadcast_receive_media(message: types.Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video:
        file_id = message.video.file_id
        media_type = "video"
    elif message.animation:
        file_id = message.animation.file_id
        media_type = "animation"
    else:
        file_id = message.document.file_id
        media_type = "document"

    await state.update_data(media_file_id=file_id, media_type=media_type)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(BroadcastStates.waiting_content)

# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ /skip
@dp.message(BroadcastStates.waiting_media, F.text == "/skip")
async def broadcast_skip_media(message: types.Message, state: FSMContext):
    await message.answer("–•–æ—Ä–æ—à–æ, –º–µ–¥–∏–∞ –Ω–µ –±—É–¥–µ—Ç. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(BroadcastStates.waiting_content)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(BroadcastStates.waiting_content, F.text)
async def broadcast_receive_text(message: types.Message, state: FSMContext):
    await state.update_data(broadcast_text=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–ª–∏ /skip —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏.")
    await state.set_state(BroadcastStates.waiting_button_text)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
@dp.message(BroadcastStates.waiting_button_text, F.text)
async def broadcast_receive_button_text(message: types.Message, state: FSMContext):
    text = message.text
    if text == "/skip":
        await state.update_data(button_text=None, button_url=None)
        await send_broadcast(message, state)
    else:
        await state.update_data(button_text=text)
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏.")
        await state.set_state(BroadcastStates.waiting_button_url)

# –ü–æ–ª—É—á–∞–µ–º URL –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
@dp.message(BroadcastStates.waiting_button_url, F.text)
async def broadcast_receive_button_url(message: types.Message, state: FSMContext):
    url = message.text
    if not (url.startswith("http://") or url.startswith("https://")):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π URL. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(button_url=url)
    await send_broadcast(message, state)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_broadcast(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("broadcast_text", "")
    media_file_id = data.get("media_file_id")
    media_type = data.get("media_type")
    button_text = data.get("button_text")
    button_url = data.get("button_url")

    keyboard = None
    if button_text and button_url:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=button_text, url=button_url)]
        ])

    with sqlite3.connect("basketball_bot.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users")
        users = [row[0] for row in cursor.fetchall()]

    sent_count = 0
    failed_count = 0

    for user_id in users:
        try:
            if media_file_id:
                if media_type == "photo":
                    await bot.send_photo(user_id, photo=media_file_id, caption=text, reply_markup=keyboard)
                elif media_type == "video":
                    await bot.send_video(user_id, video=media_file_id, caption=text, reply_markup=keyboard)
                elif media_type == "animation":
                    await bot.send_animation(user_id, animation=media_file_id, caption=text, reply_markup=keyboard)
                else:
                    await bot.send_document(user_id, document=media_file_id, caption=text, reply_markup=keyboard)
            else:
                await bot.send_message(user_id, text, reply_markup=keyboard)
            sent_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_count += 1

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}")
    await state.clear()

if __name__ == "__main__":
    init_db()
    dp.run_polling(bot)